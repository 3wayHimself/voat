@*This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an "AS IS" basis,
    WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
    the specific language governing rights and limitations under the License.

    All portions of the code written by Voat are Copyright (c) 2014 Voat
    All Rights Reserved.*@

@model Voat.Data.Models.SubverseSet

@{
    var userData = Voat.Domain.UserData.GetContextUserData();
    var domainReference = new Voat.Domain.Models.DomainReference(Voat.Domain.Models.DomainType.Set, Model.Name, Model.UserName);

    ViewBag.Title = Model.Title;
    ViewBag.Description = Model.Description;

    //System.Diagnostics.Debug.Assert(userData == null || userData.UserName == User.Identity.Name, "Context UserData and Identity UserName mismatch");

    //string subverseAge = Age.ToRelative(Model.CreationDate);
    //string subverseOwner = "youcanclaimthissub";
    //if (String.IsNullOrEmpty(Model.CreatedBy))
    //{
    //    var subOwner = Model.SubverseModerators.FirstOrDefault(n => n.Subverse == Model.Name && n.Power == 1);
    //    if (subOwner != null)
    //    {
    //        subverseOwner = subOwner.UserName;
    //    }
    //}
    //else
    //{
    //    subverseOwner = Model.CreatedBy;
    //}
}

<div class="side">

    <div class="spacer">
        <div class="titlebox">

            @*@Html.Partial("Sidebars/_SidebarModToolbox")*@

            <h1 class="hover whoaversename">
                <a href="@VoatPathHelper.BasePath(domainReference)" class="hover">@Model.Name</a>
            </h1>

            @if (User.Identity.IsAuthenticated)
            {
                if (userData.IsSubscriber(domainReference))
                {
                    <button type="button" onclick="return XXX_TODO(this, '@Model.Name')" class="btn-whoaverse-paging btn-xs btn-default btn-unsub">unsubscribe</button>
                }
                else
                {
                    <button type="button" class="btn-whoaverse-paging btn-xs btn-default btn-sub" onclick="return subscribe(this, '@Model.Name')">subscribe</button>
                }
            }
            else
            {
                <button type="button" class="btn-whoaverse-paging btn-xs btn-default btn-sub" onclick="mustLogin();">subscribe</button>
            }

            <span class="subscribers">
                <span id="subscriberCount" class="number">@Model.SubscriberCount</span>
                <span class="word">subscribers</span>
            </span>
            @*<p class="users-online fuzzed" title="number of users viewing this subverse in the past 15 minutes">
                <span class="number">~@ViewBag.OnlineUsers</span>
                <span class="word">users here now</span>
            </p>*@
            
            <form action="#" class="usertext" onsubmit="return post_form(this, 'editusertext')" id="form-xxxx">
                <input name="submission-id" value="xxxx" type="hidden">
                <div class="usertext-body may-blank-within">
                    <div class="md">
                        <p>
                            @Html.Raw(@Formatting.FormatMessage(@Model.Description))
                        </p>
                    </div>
                </div>
            </form>
            <div class="bottom">
                <p>
                    created by <a href="/user/@Model.UserName" class="author may-blank">@Model.UserName</a>
                    <span class="userattrs"></span>
                    <span class="age">a set for <time title="@Model.CreationDate" datetime="@Model.CreationDate">@Age.ToRelative(Model.CreationDate)</time></span>
                    <p>This set is @(Model.IsPublic ? "public" : "private")</p>
                    <div class="clear"></div>
                </div>
            </div>
            <div class="spacer">
                <div class="sidecontentbox">
                    @{
                        Html.RenderAction("RenderAd", "Ad", new { subverse = Model.Name });
                    }
                </div>
            </div>
            @*<div class="spacer">
                <div class="sidecontentbox ">
                    <a class="helplink message-moderators-temporary-class" title="Message the Moderators" href="/messages/compose?recipient=v/@Model.Name">message the moderators</a>
                    <div class="title">
                        <h1 class="alert-h1">MODERATORS</h1>
                    </div>
                    <ul class="content">
                        @{
                            Html.RenderAction("SubverseModeratorsList", "Subverses", new { subverseName = Model.Name });
                        }
                    </ul>
                </div>
            </div>
            @Html.Partial("~/Views/ModLog/_ModLogSidebarLinks.cshtml", Model.Name)*@
        </div>
    </div>
